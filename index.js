const {Client, Partials, GatewayIntentBits, InteractionType, Collection, EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder, ButtonBuilder, ModalBuilder, TextInputBuilder, PermissionFlagsBits, ButtonStyle, ActivityType, WebhookClient} = require("discord.js")

const config = require("./config.json")


const Discord = require('discord.js')
const client = new Discord.Client({ intents: [
  Discord.GatewayIntentBits.GuildMembers,
  Discord.GatewayIntentBits.Guilds,
  Discord.GatewayIntentBits.GuildMessages,
  Discord.GatewayIntentBits.MessageContent,
  32767
  
] });

const { QuickDB } = require('quick.db');
const db = new QuickDB();
const ms = require("ms")
const {JsonDatabase} = require("wio.db")
const db2 = new JsonDatabase({databasePath:"./json/system.json"})
const palavras = new JsonDatabase({databasePath:"./json/palavras_feias.json"})
const linksblock = new JsonDatabase({databasePath:"./json/linksblock.json"})

module.exports = client;
client.commands = new Discord.Collection();
client.slashCosmmands = new Discord.Collection();
client.config = require("./config.json");
require("./handler")(client);
const db1 = new JsonDatabase({databasePath:"./config.json"})



module.exports = client

client.setMaxListeners(20); // N√£o trocar isso, so se for adicionar mais comandos, cada 1 comando adicione 1+





client.on('interactionCreate', (interaction) => {

  if(interaction.type === InteractionType.ApplicationCommand){

      const cmd = client.slashCommands.get(interaction.commandName);

      if (!cmd) return interaction.reply(`Error`);

      interaction["member"] = interaction.guild.members.cache.get(interaction.user.id);

      cmd.run(client, interaction)

   }
})


client.on("ready", () => {
  console.log(`üëã Feito Por Camelo`);
  console.log(`üëã Credito para o: Infinity7, discord.gg/reatss `);
  console.log(`ü§ñ Meu nome e ${client.user.username}`);
  console.log(`üíî O seu server tem ${client.users.cache.size} pessoas`);
  console.log(`üë® Eu estou em ${client.guilds.cache.size} servers`);

  setInterval(() => {

    console.clear();

      console.log(`üëã Feito Por Camelo`);
    console.log(`üëã Credito para o: infinity7, discord.gg/reactss `);
    console.log(`ü§ñ Meu nome e ${client.user.username}`);
    console.log(`üíî O seu server tem ${client.users.cache.size} pessoas`);
    console.log(`üë® Eu estou em ${client.guilds.cache.size} servers`);
  }, 5000);
});






client.slashCommands = new Collection()

require('./handler')(client)
client.on("interactionCreate", require('./Events/gerenciar').execute);
client.on("interactionCreate", require('./Events/ticket').execute);
client.on("interactionCreate", require('./Events/button').execute);
client.on("interactionCreate", require('./Events/anuncio').execute);
client.on("interactionCreate", require('./Events/avaliar').execute)


const evento = require("./handler/Events2");

evento.run(client);

require("./handler/index2")(client);

const {token} = require("./token.json")
client.login(token)


const axios = require("axios")
const url = 'https://discord.com/api/v10/applications/@me';


const data = {
  description: "<a:money:1181552777323892769> **V3 Feito Por Camelo \n\n qualquer bug contate: camelo_000 para tentamos resolver da melhor maneira possivel**",
};

axios.patch(url, data, {
  headers: {
    Authorization: `Bot ${token}`,
    'Content-Type': 'application/json'
  } 
})


.then((response) => {
  console.log('Aplica√ß√£o atualizada com sucesso!');
})
.catch((error) => {
  console.error(`Erro ao atualizar aplica√ß√£o: ${error}`);
});

process.on('unhandRejection', (reason, promise) => {

  console.log(`üö´ Erro Detectado:\n\n` + reason, promise)

});

process.on('uncaughtException', (error, origin) => {

  console.log(`üö´ Erro Detectado:\n\n` + error, origin)
  
});





  
  
  client.login((config.client.token));
  /*============================= | RESPOSTA MEN√á√ÉO | =========================================*/
  
  client.on("messageCreate", message => {
    if (message.author.bot) return;
    if (message.content.includes(`<@${client.user.id}>`)) {
      message.channel.send("Ola, Use /botconfig para me configurar");
    }
  });
  
  
  /*============================= | configbot | =========================================*/
  
  
  client.on("interactionCreate", async(interaction) => {
  
    if(interaction.isButton() && interaction.customId === "configavan") {
  
      interaction.update({
        embeds:[
          new Discord.EmbedBuilder()
          .setDescription(`Altere os dados logo abaixo! \n\n Canal de avalia√ß√£o: <#${await db1.get(`avaliar_staff`)}> \n __Os Bot√µes d√™ entrada logo abaixo!__`)
          .setColor("Blue")
        ],
        components: [
          new ActionRowBuilder()
          .addComponents(
            new Discord.ButtonBuilder()  
    .setLabel(`${await db1.get(`bemvindo.bot√µes.bot√£o1.label`)}`)
    .setStyle("Link")
    .setEmoji(`${await db1.get(`bemvindo.bot√µes.bot√£o1.emoji`)}`)
    .setURL(`${await db1.get(`bemvindo.bot√µes.bot√£o1.link`)}`),
    new Discord.ButtonBuilder()  
    .setLabel(`${await db1.get(`bemvindo.bot√µes.bot√£o2.label`)}`)
    .setStyle("Link")
    .setEmoji(`${await db1.get(`bemvindo.bot√µes.bot√£o2.emoji`)}`)
    .setURL(`${await db1.get(`bemvindo.bot√µes.bot√£o2.link`)}`),
    
    new Discord.ButtonBuilder()  
    .setLabel(`${await db1.get(`bemvindo.bot√µes.bot√£o3.label`)}`)
    .setStyle("Link")
    .setEmoji(`${await db1.get(`bemvindo.bot√µes.bot√£o3.emoji`)}`)
    .setURL(`${await db1.get(`bemvindo.bot√µes.bot√£o3.link`)}`),
          ),
          new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
            .setCustomId("bemvindo1")
            .setLabel("Mudar Bot√£o 1")
            .setStyle(2),
            new ButtonBuilder()
            .setCustomId("bemvindo2")
            .setLabel("Mudar Bot√£o 2")
            .setStyle(2),
            new ButtonBuilder()
            .setCustomId("bemvindo3")
            .setLabel("Mudar Bot√£o 3")
            .setStyle(2),
            new ButtonBuilder()
            .setCustomId("chatavaliation")
            .setLabel("Mudar Canal de avalia√ß√£o")
            .setStyle(2),
          )
        ]
      })
    }
  
    if(interaction.isButton() && interaction.customId === "bemvindo1"){
  
      const modal = new Discord.ModalBuilder()
      .setTitle("Configura√ß√£o do Bem Vindo 1")
      .setCustomId("bemvindo1_modal")
  
      const label = new Discord.TextInputBuilder()
      .setCustomId("label")
      .setLabel("Alterar Label do Bot√£o")
      .setRequired(true)
      .setStyle(1)
      .setMaxLength(25)
  
      const emoji = new Discord.TextInputBuilder()
      .setCustomId("emoji")
      .setLabel("Alterar emoji do Bot√£o")
      .setRequired(true)
      .setStyle(1)
  
      const link = new Discord.TextInputBuilder()
      .setCustomId("link")
      .setLabel("Alterar link do Bot√£o")
      .setRequired(true)
      .setStyle(1)
  
      modal.addComponents(new ActionRowBuilder().addComponents(label))
  
      modal.addComponents(new ActionRowBuilder().addComponents(emoji))
  
      modal.addComponents(new ActionRowBuilder().addComponents(link))
  
      return interaction.showModal(modal)
  
    }
  
  
    if(interaction.isButton() && interaction.customId === "bemvindo2"){
    const modal = new Discord.ModalBuilder()
      .setTitle("Configura√ß√£o do Bem Vindo 2")
      .setCustomId("bemvindo2_modal")
  
      const label = new Discord.TextInputBuilder()
      .setCustomId("label")
      .setLabel("Alterar Label do Bot√£o")
      .setRequired(true)
      .setStyle(1)
      .setMaxLength(25)
  
      const emoji = new Discord.TextInputBuilder()
      .setCustomId("emoji")
      .setLabel("Alterar emoji do Bot√£o")
      .setRequired(true)
      .setStyle(1)
  
      const link = new Discord.TextInputBuilder()
      .setCustomId("link")
      .setLabel("Alterar link do Bot√£o")
      .setRequired(true)
      .setStyle(1)
  
      modal.addComponents(new ActionRowBuilder().addComponents(label))
  
      modal.addComponents(new ActionRowBuilder().addComponents(emoji))
  
      modal.addComponents(new ActionRowBuilder().addComponents(link))
  
      return interaction.showModal(modal)
  
  
    }
  
  
    if(interaction.isButton() && interaction.customId === "bemvindo3"){
  
      const modal = new Discord.ModalBuilder()
      .setTitle("Configura√ß√£o do Bem Vindo 3")
      .setCustomId("bemvindo3_modal")
  
      const label = new Discord.TextInputBuilder()
      .setCustomId("label")
      .setLabel("Alterar Label do Bot√£o")
      .setRequired(true)
      .setStyle(1)
      .setMaxLength(25)
  
      const emoji = new Discord.TextInputBuilder()
      .setCustomId("emoji")
      .setLabel("Alterar emoji do Bot√£o")
      .setRequired(true)
      .setStyle(1)
  
      const link = new Discord.TextInputBuilder()
      .setCustomId("link")
      .setLabel("Alterar link do Bot√£o")
      .setRequired(true)
      .setStyle(1)
  
      modal.addComponents(new ActionRowBuilder().addComponents(label))
  
      modal.addComponents(new ActionRowBuilder().addComponents(emoji))
  
      modal.addComponents(new ActionRowBuilder().addComponents(link))
  
      return interaction.showModal(modal)
  
  
    }
  
    if(interaction.isModalSubmit() && interaction.customId === "bemvindo1_modal") {
      const label = interaction.fields.getTextInputValue("label")
      const emoji = interaction.fields.getTextInputValue("emoji")
      const link = interaction.fields.getTextInputValue("link")
  
      db1.set(`bemvindo.bot√µes.bot√£o1.label`,label)
      db1.set(`bemvindo.bot√µes.bot√£o1.emoji`,emoji)
      db1.set(`bemvindo.bot√µes.bot√£o1.link`, link)
  
      interaction.update({
        embeds:[
          new Discord.EmbedBuilder()
          .setDescription(`Altere os dados logo abaixo! \n\n Canal de avalia√ß√£o: <#${await db1.get(`avaliar_staff`)}> \n __Os Bot√µes d√™ entrada logo abaixo!__`)
          .setColor("Blue")
        ],
  
        components: [
          new ActionRowBuilder()
          .addComponents(
            new Discord.ButtonBuilder()  
    .setLabel(`${await db1.get(`bemvindo.bot√µes.bot√£o1.label`)}`)
    .setStyle("Link")
    .setEmoji(`${await db1.get(`bemvindo.bot√µes.bot√£o1.emoji`)}`)
    .setURL(`${await db1.get(`bemvindo.bot√µes.bot√£o1.link`)}`),
    new Discord.ButtonBuilder()  
    .setLabel(`${await db1.get(`bemvindo.bot√µes.bot√£o2.label`)}`)
    .setStyle("Link")
    .setEmoji(`${await db1.get(`bemvindo.bot√µes.bot√£o2.emoji`)}`)
    .setURL(`${await db1.get(`bemvindo.bot√µes.bot√£o2.link`)}`),
    
    new Discord.ButtonBuilder()  
    .setLabel(`${await db1.get(`bemvindo.bot√µes.bot√£o3.label`)}`)
    .setStyle("Link")
    .setEmoji(`${await db1.get(`bemvindo.bot√µes.bot√£o3.emoji`)}`)
    .setURL(`${await db1.get(`bemvindo.bot√µes.bot√£o3.link`)}`),
          ),
          new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
            .setCustomId("bemvindo1")
            .setLabel("Mudar Bot√£o 1")
            .setStyle(2),
            new ButtonBuilder()
            .setCustomId("bemvindo2")
            .setLabel("Mudar Bot√£o 2")
            .setStyle(2),
            new ButtonBuilder()
            .setCustomId("bemvindo3")
            .setLabel("Mudar Bot√£o 3")
            .setStyle(2),
            new ButtonBuilder()
            .setCustomId("chatavaliation")
            .setLabel("Mudar Canal de avalia√ß√£o")
            .setStyle(2),
          )
        ]
      })
  
  
    }
  
  
  
    if(interaction.isModalSubmit() && interaction.customId === "bemvindo3_modal") {
      const label = interaction.fields.getTextInputValue("label")
      const emoji = interaction.fields.getTextInputValue("emoji")
      const link = interaction.fields.getTextInputValue("link")
  
      db1.set(`bemvindo.bot√µes.bot√£o3.label`,label)
      db1.set(`bemvindo.bot√µes.bot√£o3.emoji`,emoji)
      db1.set(`bemvindo.bot√µes.bot√£o3.link`, link)
  
      interaction.update({
        embeds:[
          new Discord.EmbedBuilder()
          .setDescription(`Altere os dados logo abaixo! \n\n Canal de avalia√ß√£o: <#${await db1.get(`avaliar_staff`)}> \n __Os Bot√µes d√™ entrada logo abaixo!__`)
          .setColor("Blue")
        ],
        components: [
          new ActionRowBuilder()
          .addComponents(
            new Discord.ButtonBuilder()  
    .setLabel(`${await db1.get(`bemvindo.bot√µes.bot√£o1.label`)}`)
    .setStyle("Link")
    .setEmoji(`${await db1.get(`bemvindo.bot√µes.bot√£o1.emoji`)}`)
    .setURL(`${await db1.get(`bemvindo.bot√µes.bot√£o1.link`)}`),
    new Discord.ButtonBuilder()  
    .setLabel(`${await db1.get(`bemvindo.bot√µes.bot√£o2.label`)}`)
    .setStyle("Link")
    .setEmoji(`${await db1.get(`bemvindo.bot√µes.bot√£o2.emoji`)}`)
    .setURL(`${await db1.get(`bemvindo.bot√µes.bot√£o2.link`)}`),
    
    new Discord.ButtonBuilder()  
    .setLabel(`${await db1.get(`bemvindo.bot√µes.bot√£o3.label`)}`)
    .setStyle("Link")
    .setEmoji(`${await db1.get(`bemvindo.bot√µes.bot√£o3.emoji`)}`)
    .setURL(`${await db1.get(`bemvindo.bot√µes.bot√£o3.link`)}`),
          ),
          new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
            .setCustomId("bemvindo1")
            .setLabel("Mudar Bot√£o 1")
            .setStyle(2),
            new ButtonBuilder()
            .setCustomId("bemvindo2")
            .setLabel("Mudar Bot√£o 2")
            .setStyle(2),
            new ButtonBuilder()
            .setCustomId("bemvindo3")
            .setLabel("Mudar Bot√£o 3")
            .setStyle(2),
            new ButtonBuilder()
            .setCustomId("chatavaliation")
            .setLabel("Mudar Canal de avalia√ß√£o")
            .setStyle(2),
          )
        ]
      })
  
  
    }
  
  
  
  
    if(interaction.isModalSubmit() && interaction.customId === "bemvindo2_modal") {
      const label = interaction.fields.getTextInputValue("label")
      const emoji = interaction.fields.getTextInputValue("emoji")
      const link = interaction.fields.getTextInputValue("link")
  
      db1.set(`bemvindo.bot√µes.bot√£o2.label`,label)
      db1.set(`bemvindo.bot√µes.bot√£o2.emoji`,emoji)
      db1.set(`bemvindo.bot√µes.bot√£o2.link`, link)
  
      interaction.update({
        embeds:[
          new Discord.EmbedBuilder()
          .setDescription(`Altere os dados logo abaixo! \n\n Canal de avalia√ß√£o: <#${await db1.get(`avaliar_staff`)}> \n __Os Bot√µes d√™ entrada logo abaixo!__`)
          .setColor("Blue")
        ],
        components: [
          new ActionRowBuilder()
          .addComponents(
            new Discord.ButtonBuilder()  
    .setLabel(`${await db1.get(`bemvindo.bot√µes.bot√£o1.label`)}`)
    .setStyle("Link")
    .setEmoji(`${await db1.get(`bemvindo.bot√µes.bot√£o1.emoji`)}`)
    .setURL(`${await db1.get(`bemvindo.bot√µes.bot√£o1.link`)}`),
    new Discord.ButtonBuilder()  
    .setLabel(`${await db1.get(`bemvindo.bot√µes.bot√£o2.label`)}`)
    .setStyle("Link")
    .setEmoji(`${await db1.get(`bemvindo.bot√µes.bot√£o2.emoji`)}`)
    .setURL(`${await db1.get(`bemvindo.bot√µes.bot√£o2.link`)}`),
    
    new Discord.ButtonBuilder()  
    .setLabel(`${await db1.get(`bemvindo.bot√µes.bot√£o3.label`)}`)
    .setStyle("Link")
    .setEmoji(`${await db1.get(`bemvindo.bot√µes.bot√£o3.emoji`)}`)
    .setURL(`${await db1.get(`bemvindo.bot√µes.bot√£o3.link`)}`),
          ),
          new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
            .setCustomId("bemvindo1")
            .setLabel("Mudar Bot√£o 1")
            .setStyle(2),
            new ButtonBuilder()
            .setCustomId("bemvindo2")
            .setLabel("Mudar Bot√£o 2")
            .setStyle(2),
            new ButtonBuilder()
            .setCustomId("bemvindo3")
            .setLabel("Mudar Bot√£o 3")
            .setStyle(2),
            new ButtonBuilder()
            .setCustomId("chatavaliation")
            .setLabel("Mudar Canal de avalia√ß√£o")
            .setStyle(2),
          )
        ]
      })
  
  
    }
  
  
    if(interaction.isButton() && interaction.customId === "chatavaliation"){
  
      const modal = new Discord.ModalBuilder()
      .setTitle("Configura√ß√£o do canal de avalia√ß√£o")
      .setCustomId("modal_avaliar_config")
  
      const label = new Discord.TextInputBuilder()
      .setCustomId("id")
      .setLabel("Qual √© o id do canal?")
      .setRequired(true)
      .setStyle(1)
      modal.addComponents(new ActionRowBuilder().addComponents(label))
  
      return interaction.showModal(modal)
  
  
    }
  
    if(interaction.isModalSubmit() && interaction.customId === "modal_avaliar_config") {
      const chan = interaction.fields.getTextInputValue("id")
      const channel = client.channels.cache.get(chan) 
  
      if(!channel) {
        interaction.reply({
          content:"Escolha id de um canal!",
          ephemeral:true
        })
      } else {
        db1.set(`avaliar_staff`, chan)
  
        interaction.update({
          embeds:[
            new Discord.EmbedBuilder()
            .setDescription(`Altere os dados logo abaixo! \n\n Canal de avalia√ß√£o: <#${await db1.get(`avaliar_staff`)}> \n __Os Bot√µes d√™ entrada logo abaixo!__`)
            .setColor("Blue")
          ],
          components: [
            new ActionRowBuilder()
            .addComponents(
              new Discord.ButtonBuilder()  
      .setLabel(`${await db1.get(`bemvindo.bot√µes.bot√£o1.label`)}`)
      .setStyle("Link")
      .setEmoji(`${await db1.get(`bemvindo.bot√µes.bot√£o1.emoji`)}`)
      .setURL(`${await db1.get(`bemvindo.bot√µes.bot√£o1.link`)}`),
      new Discord.ButtonBuilder()  
      .setLabel(`${await db1.get(`bemvindo.bot√µes.bot√£o2.label`)}`)
      .setStyle("Link")
      .setEmoji(`${await db1.get(`bemvindo.bot√µes.bot√£o2.emoji`)}`)
      .setURL(`${await db1.get(`bemvindo.bot√µes.bot√£o2.link`)}`),
      
      new Discord.ButtonBuilder()  
      .setLabel(`${await db1.get(`bemvindo.bot√µes.bot√£o3.label`)}`)
      .setStyle("Link")
      .setEmoji(`${await db1.get(`bemvindo.bot√µes.bot√£o3.emoji`)}`)
      .setURL(`${await db1.get(`bemvindo.bot√µes.bot√£o3.link`)}`),
            ),
            new ActionRowBuilder()
            .addComponents(
              new ButtonBuilder()
              .setCustomId("bemvindo1")
              .setLabel("Mudar Bot√£o 1")
              .setStyle(2),
              new ButtonBuilder()
              .setCustomId("bemvindo2")
              .setLabel("Mudar Bot√£o 2")
              .setStyle(2),
              new ButtonBuilder()
              .setCustomId("bemvindo3")
              .setLabel("Mudar Bot√£o 3")
              .setStyle(2),
              new ButtonBuilder()
              .setCustomId("chatavaliation")
              .setLabel("Mudar Canal de avalia√ß√£o")
              .setStyle(2),
            )
          ]
        })
  
  
      }
    }
  
  
  })
  
  
  /*============================= | FORMULARIO | =========================================*/
   
   client.on("interactionCreate", async(interaction) => {
     if (interaction.isButton()) {
       if (interaction.customId === "formulario") {
         if (!interaction.guild.channels.cache.get(await db.get(`canal_logs_${interaction.guild.id}`))) return interaction.reply({ content: `O sistema est√° desativado.`, ephemeral: true })
         const modal = new Discord.ModalBuilder()
         .setCustomId("modal")
         .setTitle("Formul√°rio"); 
   
         const pergunta1 = new Discord.TextInputBuilder()
         .setCustomId("pergunta1") // Coloque o ID da pergunta
         .setLabel("Qual e seu nome/sobrenome?") // Coloque a pergunta
         .setMaxLength(20) // M√°ximo de caracteres para a resposta
         .setPlaceholder("Nome/Sobrenome") // Mensagem que fica antes de escrever a resposta
         .setRequired(true) // Deixar para responder obrigat√≥rio (true | false)
         .setStyle(Discord.TextInputStyle.Short) // Tipo de resposta (Short | Paragraph)
   
         const pergunta2 = new Discord.TextInputBuilder()
         .setCustomId("pergunta2") // Coloque o ID da pergunta
         .setLabel("Qual e sua idade?") // Coloque a pergunta
         .setMaxLength(2) // M√°ximo de caracteres para a resposta
         .setPlaceholder("Idade") // Mensagem que fica antes de escrever a resposta
         .setStyle(Discord.TextInputStyle.Short) // Tipo de resposta (Short | Paragraph)
         .setRequired(true)
   
         const pergunta3 = new Discord.TextInputBuilder()
         .setCustomId("pergunta3") // Coloque o ID da pergunta
         .setLabel("Qual e seu horario disponivel?") // Coloque a pergunta
         .setPlaceholder("Manh√£/Tarde/Noite/Madrugada") // Mensagem que fica antes de escrever a resposta
         .setStyle(Discord.TextInputStyle.Short) // Tipo de resposta (Short | Paragraph)
         .setRequired(true)
   
         const pergunta4 = new Discord.TextInputBuilder()
         .setCustomId("pergunta4") // Coloque o ID da pergunta
         .setLabel("Porque devemos te aceitar na STAFF?") // Coloque a pergunta
         .setMaxLength(1000)
         .setPlaceholder("Motivo") // Mensagem que fica antes de escrever a resposta
         .setStyle(Discord.TextInputStyle.Paragraph) // Tipo de resposta (Short | Paragraph)
         .setRequired(true)
   
   
         modal.addComponents(
           new Discord.ActionRowBuilder().addComponents(pergunta1),
           new Discord.ActionRowBuilder().addComponents(pergunta2),
           new Discord.ActionRowBuilder().addComponents(pergunta3),
           new Discord.ActionRowBuilder().addComponents(pergunta4)
   
         )
   
         await interaction.showModal(modal)
       }
     } else if (interaction.isModalSubmit()) {
       if (interaction.customId === "modal") {
         const resposta1 = interaction.fields.getTextInputValue("pergunta1")
         const resposta2 = interaction.fields.getTextInputValue("pergunta2")
         const resposta3 = interaction.fields.getTextInputValue("pergunta3")
         const resposta4 = interaction.fields.getTextInputValue("pergunta4")
   
   
         if (!resposta1) resposta1 = "N√£o informado."
         if (!resposta2) resposta2 = "N√£o informado."
         if (!resposta3) resposta3 = "N√£o informado."
         if (!resposta4) resposta4 = "N√£o informado."
   
   
         const embed = new Discord.EmbedBuilder()
         .setColor("303136")
         .setAuthor({ name: interaction.guild.name, iconURL: interaction.guild.iconURL({ dynamic: true }) })
         .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true }))
         .setDescription(`**Usuario:** ${interaction.user}\n**ID:** \`${interaction.user.id}\``)
         .addFields(
           {
             name: `Nome`,
             value: `\`\`\`${resposta1}\`\`\``,
             inline: true
           },
           {
             name: `Idade`,
             value: `\`\`\`${resposta2}\`\`\``,
             inline: true
           },
           {
             name: `Horarios`,
             value: `\`\`\`${resposta3}\`\`\``,
             inline: true
           },
           {
             name: `Motivo`,
             value: `\`\`\`${resposta4}\`\`\``,
             inline: false
           }
         );
   
         interaction.reply({ embeds: [ new Discord.EmbedBuilder().setDescription(`**${interaction.user},** Seu formul√°rio foi enviado com sucesso. Aguarde a resposta no seu privado!`)
                   .setColor("303136")
           ],
           ephemeral: true,
       })
         await interaction.guild.channels.cache.get(await db.get(`canal_logs_${interaction.guild.id}`)).send({ embeds: [embed] })
       }
     }
   })
  
  
  /*============================= | SISTEMA BEM-VINDO| =========================================*/
  
  client.slashCommands = new Discord.Collection()
  require('./handler')(client)
  
  client.on("guildMemberAdd", async (member) => {
    const canal_logs = (config.bemvindo.logs);
    if (!canal_logs) return;
  
    const trm = new Discord.ButtonBuilder()  
    .setLabel(`${await db1.get(`bemvindo.bot√µes.bot√£o1.label`)}`)
    .setStyle("Link")
    .setEmoji(`${await db1.get(`bemvindo.bot√µes.bot√£o1.emoji`)}`)
    .setURL(`${await db1.get(`bemvindo.bot√µes.bot√£o1.link`)}`)
  
    const trm2 = new Discord.ButtonBuilder()  
    .setLabel(`${await db1.get(`bemvindo.bot√µes.bot√£o2.label`)}`)
    .setStyle("Link")
    .setEmoji(`${await db1.get(`bemvindo.bot√µes.bot√£o2.emoji`)}`)
    .setURL(`${await db1.get(`bemvindo.bot√µes.bot√£o2.link`)}`)
  
    const trm3 = new Discord.ButtonBuilder()  
    .setLabel(`${await db1.get(`bemvindo.bot√µes.bot√£o3.label`)}`)
    .setStyle("Link")
    .setEmoji(`${await db1.get(`bemvindo.bot√µes.bot√£o3.emoji`)}`)
    .setURL(`${await db1.get(`bemvindo.bot√µes.bot√£o3.link`)}`)
  
  
  
  
    const arrow = new Discord.ActionRowBuilder()
    .addComponents(trm, trm2, trm3)
  
  
    const embed = new Discord.EmbedBuilder()
    .setColor(config.embeds_color.embed_invisible)
    .setThumbnail(member.user.displayAvatarURL({ dynamic: true }))
    .setImage(config.client.barrinha)
    .setTitle(`${config.bemvindo.name} - Boas Vindas `)
    .setDescription(`**Bem vindo ao nosso servidor!**\nEvite quebrar as nossas diretrizes.\n\n- üë§Usu√°rio: ${member}\n- üÜîID do usu√°rio: ${member.id}\n- ‚≠êMembros atualmente: ${member.guild.memberCount} membros.`);
    member.guild.channels.cache.get(config.bemvindo.logs).send({ embeds: [embed], components: [arrow] })
  })
  
  /*============================= | BOT CONFIG | =========================================*/
  
  
  client.on("interactionCreate", async interaction => {
    if (interaction.isButton()) {
      if (interaction.customId.startsWith("alterar_username")) {
        const modal_bot_config_nome = new Discord.ModalBuilder()
          .setCustomId('modal_bot_config_nome')
          .setTitle(`Altere informa√ß√µes do bot abaixo.`)
        const nome_bot = new Discord.TextInputBuilder()
          .setCustomId('username_bot')
          .setLabel('Digite o nome do bot.')
          .setPlaceholder('Escreva o nome aqui.')
          .setStyle(Discord.TextInputStyle.Short)
  
        const firstActionRow = new Discord.ActionRowBuilder().addComponents(nome_bot);
        modal_bot_config_nome.addComponents(firstActionRow)
        await interaction.showModal(modal_bot_config_nome);
      }
    }
  
    if (interaction.isButton()) {
      if (interaction.customId.startsWith("alterar_avatar")) {
        const modal_bot_config_avatar = new Discord.ModalBuilder()
          .setCustomId('modal_bot_config_avatar')
          .setTitle(`Altere informa√ß√µes do bot abaixo.`)
        const avatar_bot_modal = new Discord.TextInputBuilder()
          .setCustomId('bot_avatar')
          .setLabel('URL do avatar.')
          .setPlaceholder('URL aqui')
          .setStyle(Discord.TextInputStyle.Short)
        const SecondActionRow = new Discord.ActionRowBuilder().addComponents(avatar_bot_modal)
        modal_bot_config_avatar.addComponents(SecondActionRow)
        await interaction.showModal(modal_bot_config_avatar);
      }
    }
    //
    if (!interaction.isModalSubmit()) return;
    if (interaction.customId === 'modal_bot_config_nome') {
      const nome_bot = interaction.fields.getTextInputValue('username_bot');
  
      await interaction.reply({
        ephemeral: true,
        embeds: [
          new Discord.EmbedBuilder()
            .setColor(config.embeds_color.embed_invisible)
            .setDescription(`**${interaction.user.tag},** Alterei o meu nome para:`)
            .addFields(
              {
                name: `\\üåü Nome alterado para:`,
                value: `\`\`\`fix\n${nome_bot}\n\`\`\``,
              },
            )
            .setTimestamp()
            .setFooter({ text: interaction.user.username, iconURL: interaction.user.displayAvatarURL({ dinamyc: true }) })
        ]
      })
      interaction.client.user.setUsername(nome_bot)
    }
    //
    if (!interaction.isModalSubmit()) return;
    if (interaction.customId === 'modal_bot_config_avatar') {
      const avatar_bot = interaction.fields.getTextInputValue('bot_avatar');
  
      interaction.reply({
        ephemeral: true,
        embeds: [
          new Discord.EmbedBuilder()
            .setColor(config.embeds_color.embed_invisible)
            .setDescription(`**${interaction.user.tag},** Alterei o meu avatar para:`)
            .setImage(avatar_bot)
            .setFooter({ text: interaction.user.username, iconURL: interaction.user.displayAvatarURL({ dinamyc: true }) })
        ]
      })
      interaction.client.user.setAvatar(avatar_bot)
    }
  })
  
  
  /*============================= | PAINEL ENCOMENDAR | =========================================*/
  
  client.on("interactionCreate", async(interaction) => {
  if (interaction.isButton()) {
    if (interaction.customId === "painel_encomendar") {
      if (!interaction.guild.channels.cache.get(await db.get(`canal_encomendar_${interaction.guild.id}`))) return interaction.reply({ content: `O sistema est√° desativado.`, ephemeral: true })
      const modal = new Discord.ModalBuilder()
      .setCustomId("modal_encomendar")
      .setTitle("*Encomendar*");
  
      const pergunta1 = new Discord.TextInputBuilder()
      .setCustomId("pergunta1") 
      .setLabel("Qual produto vc deseja?") 
      .setMaxLength(30) 
      .setPlaceholder("Sua resposta") 
      .setRequired(true) 
      .setStyle(Discord.TextInputStyle.Short) 
  
      const pergunta2 = new Discord.TextInputBuilder()
      .setCustomId("pergunta2") 
      .setLabel("Quantas unidades vc deseja?") 
      .setMaxLength(30) 
      .setPlaceholder("Sua resposta") 
      .setStyle(Discord.TextInputStyle.Short) 
      .setRequired(true)
  
      const pergunta3 = new Discord.TextInputBuilder()
      .setCustomId("pergunta3") 
      .setLabel("Deseja deixar alguma observa√ß√£o?") 
      .setPlaceholder("Sua resposta") 
      .setStyle(Discord.TextInputStyle.Paragraph) 
      .setRequired(true)
  
      modal.addComponents(
        new Discord.ActionRowBuilder().addComponents(pergunta1),
        new Discord.ActionRowBuilder().addComponents(pergunta2),
        new Discord.ActionRowBuilder().addComponents(pergunta3)
      )
  
      await interaction.showModal(modal)
    }
  } else if (interaction.isModalSubmit()) {
    if (interaction.customId === "modal_encomendar") {
      const resposta1 = interaction.fields.getTextInputValue("pergunta1")
      const resposta2 = interaction.fields.getTextInputValue("pergunta2")
      const resposta3 = interaction.fields.getTextInputValue("pergunta3")
      const data24 = Math.floor(+new Date() / 1000);
  
      const data_compra = `<t:${data24}:f>`;
  
      const passado_compra = `<t:${data24}:R>`;
  
      if (!resposta1) resposta1 = "N√£o informado."
      if (!resposta2) resposta2 = "N√£o informado."
      if (!resposta3) resposta3 = "N√£o informado."
  
      const embed = new Discord.EmbedBuilder()
      .setColor(config.embeds_color.embed_invisible)
      .setDescription(`**:bust_in_silhouette: | O usu√°rio ${interaction.user} enviou um pedido abaixo**`)
      .addFields(
        {
          name: `:shopping_cart: | Produto Desejado`,
          value: ` \`${resposta1}\``,
          inline: false
        },
        {
          name: `üì¶ | Quantidade Desejada`,
          value: ` \`${resposta2}\``,
          inline: false
        },
        {
          name: `:grey_exclamation: | Observa√ß√£o`,
          value: ` \`${resposta3}\``,
          inline: false
        },
        {
          name: `üìÖ | Data/Hor√°rio:`,
          value: `${data_compra} (${passado_compra})`,
          inline: false
        },
      );
  
      interaction.reply({ content: `Ol√° **${interaction.user.username}**, seu pedido foi enviada com sucesso! ‚ù§`, ephemeral: true})
      await interaction.guild.channels.cache.get(await db.get(`canal_encomendar_${interaction.guild.id}`)).send({ embeds: [embed] })
    }
  }
  })
  
  
  /*============================= | PAINEL AVALIA√á√ïES | =========================================*/
  
  client.on("interactionCreate", async(interaction) => {
  if (interaction.isButton()) {
    if (interaction.customId === "painel_avalia√ß√£o") {
      if (!interaction.guild.channels.cache.get(await db.get(`canal_avalia√ß√£o_${interaction.guild.id}`))) return interaction.reply({ content: `O sistema est√° desativado.`, ephemeral: true })
      const modal = new Discord.ModalBuilder()
      .setCustomId("modalaval")
      .setTitle("*Avalia√ß√£o*");
  
      const pergunta1 = new Discord.TextInputBuilder()
      .setCustomId("pergunta4") 
      .setLabel("De uma nota de 0/10 para seu item/atendimento") 
      .setMaxLength(30) 
      .setPlaceholder("Resposta aqui!") 
      .setRequired(true) 
      .setStyle(Discord.TextInputStyle.Short) 
  
      const pergunta2 = new Discord.TextInputBuilder()
      .setCustomId("pergunta5") 
      .setLabel("Descreva sua experiencia com a nossa loja") 
      .setMaxLength(30) 
      .setPlaceholder("Resposta aqui!") 
      .setStyle(Discord.TextInputStyle.Short) 
      .setRequired(true)
  
      modal.addComponents(
        new Discord.ActionRowBuilder().addComponents(pergunta1),
        new Discord.ActionRowBuilder().addComponents(pergunta2),
      )
  
      await interaction.showModal(modal)
    }
  } else if (interaction.isModalSubmit()) {
    if (interaction.customId === "modalaval") {
      const resposta4 = interaction.fields.getTextInputValue("pergunta4")
      const resposta5 = interaction.fields.getTextInputValue("pergunta5")
      const data24 = Math.floor(+new Date() / 1000);
  
      const data_compra = `<t:${data24}:f>`;
  
      const passado_compra = `<t:${data24}:R>`;
  
      if (!resposta4) resposta4 = "N√£o informado."
      if (!resposta5) resposta5 = "N√£o informado."
  
      const embed = new Discord.EmbedBuilder()
      .setColor(config.embeds_color.embed_invisible)
      .setTitle("üíì | Nova Avalia√ß√£o")
      .addFields(
        {
          name: `üë• | Avalia√ß√£o Enviada Por:`,
          value: ` <@${interaction.user.id}>`,
          inline: false
        },
        {
          name: `‚≠ê | Nota para o produto/atendimento:`,
          value: ` \`${resposta4}\``,
          inline: false
        },
        {
          name: `‚ú® | Feedback da loja:`,
          value: `${resposta5}`,
          inline: false
        },
        {
          name: `üìÖ | Data/Hor√°rio:`,
          value: `${data_compra} (${passado_compra})`,
          inline: false
        },
      );
  
      interaction.reply({ content: `Ol√° **${interaction.user.username}**, sua avalia√ß√£o foi enviada com sucesso! ‚ù§`, ephemeral: true})
      await interaction.guild.channels.cache.get(await db.get(`canal_avalia√ß√£o_${interaction.guild.id}`)).send({ embeds: [embed] })
    }
  }
  })
  
  /*============================= | RESPOSTA MEN√á√ÉO | =========================================*/
  
  client.on("messageCreate", message => {
    if (message.author.bot) return;
    if (message.content.includes(`<@${client.user.id}>`)) {
      message.channel.send("Marca n√£o, filho da puta! To batendo punheta!");
    }
  });
  
  
  
  
  client.on("interactionCreate", async interaction => {
    if(interaction.isStringSelectMenu() && interaction.customId === "gerenciar_select") {
      const options = interaction.values[0]
  
      if(options === "channel_logs"){
        const modal = new ModalBuilder()
        .setTitle("Canal de logs")
        .setCustomId("modal_channel_logs");
  
        const text = new TextInputBuilder()
            .setCustomId("text")
            .setLabel("Qual ser√° o canal de logs")
            .setPlaceholder("Coloque o id!")
            .setStyle(1)
            .setValue(interaction.channel.id)
            .setRequired(true);
  
                modal.addComponents(new ActionRowBuilder().addComponents(text));
  
  
    return interaction.showModal(modal);
      }
  
  
  
  
      if(options === "palavras_block"){
        const modal = new ModalBuilder()
        .setTitle("Bloqueador de Palavra")
        .setCustomId("modal_palavra_block");
  
        const text = new TextInputBuilder()
            .setCustomId("text")
            .setLabel("Qual ser√° a palavra bloqueada?")
            .setPlaceholder("Exemplo: porra")
            .setStyle(1)
            .setRequired(true);
  
            const mute = new TextInputBuilder()
                .setCustomId("mute")
                .setLabel("Quanto tempo de mute em segundos")
                .setPlaceholder("Exemplo: 12 ")
                .setStyle(1)
                .setRequired(true);
  
                modal.addComponents(new ActionRowBuilder().addComponents(text));
  
                modal.addComponents(new ActionRowBuilder().addComponents(mute));
  
    return interaction.showModal(modal);
      }
  
  
  
  
      if(options === "links_remove"){
        
        const modal = new ModalBuilder()
        .setTitle("Bloqueador de link")
        .setCustomId("modal_link_block")
  
        const text = new TextInputBuilder()
        .setCustomId("text")
        .setLabel("Qual ser√° o link bloqueada?")
        .setPlaceholder("Exemplo: discord.com")
        .setStyle(1)
        .setRequired(true)
  
        modal.addComponents(new ActionRowBuilder().addComponents(text))
  
        return interaction.showModal(modal)
      }
  
      if(options === "ant_alts"){
  
  
        const modal = new ModalBuilder()
        .setTitle("Bloqueador de alts")
        .setCustomId("modal_alts_block")
  
        const text = new TextInputBuilder()
        .setCustomId("text")
        .setLabel("Quantos dias ser√° o minimo?")
        .setPlaceholder("Exemplo: 7")
        .setStyle(1)
        .setMaxLength(2)
        .setRequired(true)
  
        modal.addComponents(new ActionRowBuilder().addComponents(text))
  
        return interaction.showModal(modal)
  
  
  
      }
  
      if(options === "debug"){
  
        interaction.update({content:`${interaction.user}`})
  
      }
  
     
    };
  
    if(interaction.isModalSubmit() && interaction.customId === "modal_palavra_block") {
      const text = interaction.fields.getTextInputValue("text")
      const mute = interaction.fields.getTextInputValue("mute")
      if (!isNaN(mute)) {
        db2.set(`automod.mute`, mute);
  
        palavras.push(`palavras`, `${text}`)
  
        interaction.reply({content:`A Palavra ${text} Foi Adicionado com sucesso!`, ephemeral:true})
  
    } else {
        interaction.reply({ content: "Por favor, insira um n√∫mero v√°lido.", ephemeral:true });
    }
  
  
    };
  
    if(interaction.isModalSubmit() && interaction.customId === "modal_channel_logs") {
      const text = interaction.fields.getTextInputValue("text")
      db2.set(`automod.canal_de_logs`, text);
      interaction.reply({content:`O Canal <#${text}> Foi Adicionado com sucesso!`, ephemeral:true})
  
    };
  
    if(interaction.isModalSubmit() && interaction.customId === "modal_link_block") {
      const text = interaction.fields.getTextInputValue("text")
      linksblock.push(`links`, `${text}`)
      interaction.reply({content:`O Link ${text} Foi Adicionado com sucesso!`, ephemeral:true})
  
    };
  
    if (interaction.isModalSubmit() && interaction.customId === "modal_alts_block") {
      const text = interaction.fields.getTextInputValue("text");
      
      if (!isNaN(text)) {
          db2.set(`automod.days`, text);
          interaction.reply({ content: `O tempo foi definido para: ${text} Dias`, ephemeral:true });
      } else {
          interaction.reply({ content: "Por favor, insira um n√∫mero v√°lido.", ephemeral:true });
      }
  };
  
  
    if(interaction.isStringSelectMenu() && interaction.customId === "ativaction"){
  
      const options = interaction.values[0]
      
  
      if(options === "system_on_off"){
  
        
        switch (await db2.get(`automod.ligado`)) {
          case true: {
            await db2.set(`automod.ligado`, false)
  
  
  
            interaction.update({
              embeds:[
              new EmbedBuilder()
              .setTitle(`Sistema est√°: ${await db2.get(`automod.ligado`) === true ? "Ligado" : "Desligado"}`)
              .setDescription(`üîû** | Palavras Feias: ${await db2.get(`automod.systems.palavras`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** \n ‚ùå | ** Links Bloqueados: ${await db2.get(`automod.systems.linkblock`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``} ** \n2Ô∏è‚É£ **| Ant-Alt: ${await db2.get(`automod.systems.ant_alt`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** \n2Ô∏è‚É£ **| Ant-Ping: ${await db2.get(`automod.systems.ant_ping`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** `)
          ],
            })
          }
            
            break;
        
          default: {
            await db2.set(`automod.ligado`, true)
  
  
  
  
            interaction.update({
              embeds:[
              new EmbedBuilder()
              .setTitle(`Sistema est√°: ${await db2.get(`automod.ligado`) === true ? "Ligado" : "Desligado"}`)
              .setDescription(`üîû** | Palavras Feias: ${await db2.get(`automod.systems.palavras`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** \n ‚ùå | ** Links Bloqueados: ${await db2.get(`automod.systems.linkblock`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``} ** \n2Ô∏è‚É£ **| Ant-Alt: ${await db2.get(`automod.systems.ant_alt`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** \n2Ô∏è‚É£ **| Ant-Ping: ${await db2.get(`automod.systems.ant_ping`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** `)
          ],
            })
          }
            break;
        }
  
  
      }
  
      if(options === "palavras_on_off"){
  
        
        switch (await db2.get(`automod.systems.palavras`)) {
          case true: {
            await db2.set(`automod.systems.palavras`, false)
  
  
            interaction.update({
              embeds:[
              new EmbedBuilder()
              .setTitle(`Sistema est√°: ${await db2.get(`automod.ligado`) === true ? "Ligado" : "Desligado"}`)
              .setDescription(`üîû** | Palavras Feias: ${await db2.get(`automod.systems.palavras`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** \n ‚ùå | ** Links Bloqueados: ${await db2.get(`automod.systems.linkblock`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``} ** \n2Ô∏è‚É£ **| Ant-Alt: ${await db2.get(`automod.systems.ant_alt`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** \n2Ô∏è‚É£ **| Ant-Ping: ${await db2.get(`automod.systems.ant_ping`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** `)
          ],
            })
          }
            
            break;
        
          default: {
            await db2.set(`automod.systems.palavras`, true)
  
  
            interaction.update({
              embeds:[
              new EmbedBuilder()
              .setTitle(`Sistema est√°: ${await db2.get(`automod.ligado`) === true ? "Ligado" : "Desligado"}`)
              .setDescription(`üîû** | Palavras Feias: ${await db2.get(`automod.systems.palavras`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** \n ‚ùå | ** Links Bloqueados: ${await db2.get(`automod.systems.linkblock`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``} ** \n2Ô∏è‚É£ **| Ant-Alt: ${await db2.get(`automod.systems.ant_alt`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** \n2Ô∏è‚É£ **| Ant-Ping: ${await db2.get(`automod.systems.ant_ping`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** `)
          ],
            })
          }
            break;
        }
  
  
      }
  
  
      if(options === "links_on_off"){
  
  
        switch (await db2.get(`automod.systems.linkblock`)) {
          case true: {
            await db2.set(`automod.systems.linkblock`, false)
  
  
  
            interaction.update({
              embeds:[
              new EmbedBuilder()
              .setTitle(`Sistema est√°: ${await db2.get(`automod.ligado`) === true ? "Ligado" : "Desligado"}`)
              .setDescription(`üîû** | Palavras Feias: ${await db2.get(`automod.systems.palavras`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** \n ‚ùå | ** Links Bloqueados: ${await db2.get(`automod.systems.linkblock`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``} ** \n2Ô∏è‚É£ **| Ant-Alt: ${await db2.get(`automod.systems.ant_alt`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** \n2Ô∏è‚É£ **| Ant-Ping: ${await db2.get(`automod.systems.ant_ping`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** `)
          ],
            })
          }
            
            break;
        
          default: {
            await db2.set(`automod.systems.linkblock`, true)
  
  
            interaction.update({
              embeds:[
              new EmbedBuilder()
              .setTitle(`Sistema est√°: ${await db2.get(`automod.ligado`) === true ? "Ligado" : "Desligado"}`)
              .setDescription(`üîû** | Palavras Feias: ${await db2.get(`automod.systems.palavras`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** \n ‚ùå | ** Links Bloqueados: ${await db2.get(`automod.systems.linkblock`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``} ** \n2Ô∏è‚É£ **| Ant-Alt: ${await db2.get(`automod.systems.ant_alt`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** \n2Ô∏è‚É£ **| Ant-Ping: ${await db2.get(`automod.systems.ant_ping`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** `)
          ],
            })
          }
            break;
        }
  
  
      }
  
      if(options === "alt_on_off"){
  
  
        switch (await db2.get(`automod.systems.ant_alt`)) {
          case true: {
            await db2.set(`automod.systems.ant_alt`, false)
  
  
  
            interaction.update({
              embeds:[
              new EmbedBuilder()
              .setTitle(`Sistema est√°: ${await db2.get(`automod.ligado`) === true ? "Ligado" : "Desligado"}`)
              .setDescription(`üîû** | Palavras Feias: ${await db2.get(`automod.systems.palavras`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** \n ‚ùå | ** Links Bloqueados: ${await db2.get(`automod.systems.linkblock`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``} ** \n2Ô∏è‚É£ **| Ant-Alt: ${await db2.get(`automod.systems.ant_alt`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** \n2Ô∏è‚É£ **| Ant-Ping: ${await db2.get(`automod.systems.ant_ping`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** `)
          ],
            })
          }
            
            break;
        
          default: {
            await db2.set(`automod.systems.ant_alt`, true)
  
  
  
            interaction.update({
              embeds:[
              new EmbedBuilder()
              .setTitle(`Sistema est√°: ${await db2.get(`automod.ligado`) === true ? "Ligado" : "Desligado"}`)
              .setDescription(`üîû** | Palavras Feias: ${await db2.get(`automod.systems.palavras`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** \n ‚ùå | ** Links Bloqueados: ${await db2.get(`automod.systems.linkblock`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``} ** \n2Ô∏è‚É£ **| Ant-Alt: ${await db2.get(`automod.systems.ant_alt`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** \n2Ô∏è‚É£ **| Ant-Ping: ${await db2.get(`automod.systems.ant_ping`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** `)
          ],
            })
          }
            break;
        }
  
  
  
      }
  
      if(options === "ping_on_off"){
  
  
        switch (await db2.get(`automod.systems.ant_ping`)) {
          case true: {
            await db2.set(`automod.systems.ant_ping`, false)
  
  
            interaction.update({
              embeds:[
              new EmbedBuilder()
              .setTitle(`Sistema est√°: ${await db2.get(`automod.ligado`) === true ? "Ligado" : "Desligado"}`)
              .setDescription(`üîû** | Palavras Feias: ${await db2.get(`automod.systems.palavras`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** \n ‚ùå | ** Links Bloqueados: ${await db2.get(`automod.systems.linkblock`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``} ** \n2Ô∏è‚É£ **| Ant-Alt: ${await db2.get(`automod.systems.ant_alt`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** \n2Ô∏è‚É£ **| Ant-Ping: ${await db2.get(`automod.systems.ant_ping`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** `)
          ],
            })
          }
            
            break;
        
          default: {
            await db2.set(`automod.systems.ant_ping`, true)
  
  
  
            interaction.update({
              embeds:[
              new EmbedBuilder()
              .setTitle(`Sistema est√°: ${await db2.get(`automod.ligado`) === true ? "Ligado" : "Desligado"}`)
              .setDescription(`üîû** | Palavras Feias: ${await db2.get(`automod.systems.palavras`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** \n ‚ùå | ** Links Bloqueados: ${await db2.get(`automod.systems.linkblock`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``} ** \n2Ô∏è‚É£ **| Ant-Alt: ${await db2.get(`automod.systems.ant_alt`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** \n2Ô∏è‚É£ **| Ant-Ping: ${await db2.get(`automod.systems.ant_ping`) === true ? `\`Esta Ativado!\``: `\`Est√° Desativado!\``}** `)
          ],
            })
          }
            break;
        }
  
  
  
      }
  
    }
  
  
  });
  
  client.on("guildMemberAdd", async (member) => {
    const systemon = await db2.get(`automod.ligado`)
  
    if(systemon === true) {
      if (!member.guild) return;
      if (member.user.bot) return;
    
      const times2 = await db2.get(`automod.days`)
      const guild = member.guild;
      const timeSpan = ms(`${times2} days`);
  
  
      if(await db2.get(`automod.systems.ant_alt`) === true) {
  
        const createdAt = new Date(member.user.createdAt).getTime();
                  const difference = Date.now() - createdAt;
                  if (difference < timeSpan) {
                      member.send({
                          embeds: [
                              new EmbedBuilder()
                                  .setTitle("__Kickado__")
                                  .setDescription("Voc√™ foi kickado por est√° com conta alt!")
                                  .setColor("Default")
                                  .setFooter({
                                      text: `Volte Quando tiver com ${times2} de conta criada!`,
                                  })
                          ]
                      }).then(() => {
                          member.kick("Conta alt");
                      });
  
                      try {
                        guild.channels.cache.get(await db2.get(`automod.canal_de_logs`)).send({
                            embeds: [
                                new EmbedBuilder()
                                    .setDescription(`${member} foi kickado por est√° com uma conta menos de ${times2} Dias!`)
                            ]
                        })
                    } catch (error) {
                        return;
                    }
    
                  }
  
                  
  
  
      } else {
        return
      }
  
  
    } else {
      return;
    }
  
  });
  
  
  
  
  
  client.on("messageCreate", async (message) => {
    const systemon = await db2.get(`automod.ligado`)
  
    if(systemon === true) {
      if (!message.guild) return;
      if (message.author.bot) return;
      if (message.member.permissions.has(PermissionFlagsBits.ManageGuild)) return;
  
  
  
      if(await db2.get(`automod.systems.linkblock`) === true) {
  
       
        const ragex = /(?:(?:https?|ftp|file):\/\/|www\.|ftp\.)(?:\([-A-Z0-9+&@#\/%=~_|$?!:,.]*\)|[-A-Z0-9+&@#\/%=~_|$?!:,.])*(?:\([-A-Z0-9+&@#\/%=~_|$?!:,.]*\)|[A-Z0-9+&@#\/%=~_|$])/gim;
        const guild = message.guild
        if (ragex.test(message.content)) {
          try {
              await message.delete();
          } catch (error) {
              return;
          }
  
          const msg = await message.channel.send({ embeds: [new EmbedBuilder().setColor('8d99ae').setDescription(`\`üîó\` | ${message.author} N√£o envie Links!`)] });
          setTimeout(async () => {
              await msg.delete();
          }, 5000);
  
          try {
            
              guild.channels.cache.get(await db2.get(`automod.canal_de_logs`)).send({
                  embeds: [
                      new EmbedBuilder()
                          .setDescription(`O Usuario: ${message.author}, Enviou um link: \n\`\`\`${message.content}\`\`\``)
                  ]
              });
          } catch (error) {
              return;
          }
      }
  
  
      } else {
        return
      }
  
  
    } else {
      return;
    }
  
  });
  
  
  
  
  
  client.on("messageCreate", async (message) => {
    const systemon = await db2.get(`automod.ligado`)
  
    if(systemon === true) {
      if (!message.guild) return;
      if (message.author.bot) return;
      if (message.member.permissions.has(PermissionFlagsBits.ManageGuild)) return;
  
  
  
      if(await db2.get(`automod.systems.palavras`) === true) {
        const Swearlinks = palavras.get(`palavras`)
  
  
  
        for (let i in Swearlinks) {
  
          if (message.content.toLowerCase().includes(Swearlinks[i].toLowerCase())) {
              try {
                  await message.delete();
              } catch (error) {
                  return;
              }
              
          const guild = message.guild;
  
              const buttons = new ActionRowBuilder().addComponents(
                  new ButtonBuilder()
                      .setLabel("Mutar Usuario")
                      .setEmoji("‚öíÔ∏è")
                      .setCustomId("timeout")
                      .setStyle(ButtonStyle.Secondary),
                  new ButtonBuilder()
                      .setLabel("Kick")
                      .setEmoji("üî®")
                      .setCustomId("kick")
                      .setStyle(ButtonStyle.Danger)
              );
  
              const msg = await message.channel.send({ embeds: [new EmbedBuilder().setDescription(`\`üìõ\` | ${message.author} Voc√™ enviou uma palavra n√£o apropriada.`)] });
              setTimeout(async () => {
                  await msg.delete();
              }, 5000);
  
              try {
                  const text = await guild.channels.cache.get(await db2.get(`automod.canal_de_logs`)).send({
                      embeds: [
                          new EmbedBuilder()
                              .setDescription(`${message.author} Usou uma das mensagens programadas para ser bloqueadas!.\n\`\`\`${message.content}\`\`\``)
                      ],
                      components: [buttons]
                  });
  
                  const col = text.createMessageComponentCollector();
                  col.on("collect", async (m) => {
                      const ms = require("ms");
                      switch (m.customId) {
                          case "timeout":
                              if (
                                  !m.member.permissions.has(PermissionFlagsBits.ModerateMembers)
                              )
                                  return m.reply({
                                      content: "N√£o tenho permiss√£o para dar mute!",
                                      ephemeral: true,
                                  });
                              const embed = new EmbedBuilder()
                                  .setTitle("Timeout")
                                  .setDescription(
                                      `Voc√™ foi mutado no servidor: \`${message.guild.name}\`, Motivo: Envio de palavras inapropriadas!`
                                  )
  
                              m.message.edit({ components: [] });
  
                              m.reply({
                                  content: `Usuario: ${message.author.tag} tomou mute de:  ${await db2.get(`automod.mute`)} segundos`,
                                  ephemeral: true,
                              });
  
                              message.member
                                  .send({
                                      embeds: [embed],
                                  })
                                  .then(async() => {
                                      const time = ms(`${await db2.get(`automod.mute`)} Seconds`);
                                      message.member.timeout(time);
                                  });
                              break;
                          case "kick":
                              if (!m.member.permissions.has(PermissionFlagsBits.KickMembers))
                                  return m.reply({
                                      content: "N√£o tenho permiss√£o para dar kick",
                                      ephemeral: true,
                                  });
                              const embedss = new EmbedBuilder()
                                  .setTitle("Kicked")
                                  .setDescription(
                                      `Voc√™ foi kickado do servidor: \`${message.guild.name}\` Por palavra Inapropriadas!`
                                  )
  
                              m.message.edit({ components: [] });
  
                              m.reply({
                                  content: `Foi Kickado: ${message.author.tag}`,
                                  ephemeral: true,
                              });
  
                              message.member
                                  .send({
                                      embeds: [embedss],
                                  })
                                  .then(() => {
                                      message.member.kick({ reason: "Enviando palavras inapropriadas!" });
                                  });
                              break;
                      }
                  });
              } catch (error) {
                  return;
              }
          }
  
      }
  
  } else {
        return
      }
  
  
    } else {
      return;
    }
  
  });
  
  
  
  
  
  client.on("messageCreate", async (message) => {
    const systemon = await db2.get(`automod.ligado`)
  
    if(systemon === true) {
      if (!message.guild) return;
      if (message.author.bot) return;
      if (message.member.permissions.has(PermissionFlagsBits.ManageGuild)) return;
  
  
  
      const guild = message.guild
      if(await db2.get(`automod.systems.ant_ping`) === true) {
  
        if (message.content == "@everyone") {
          try {
              await message.delete();
          } catch (error) {
              return;
          }
  
          const msg = await message.channel.send({ embeds: [new EmbedBuilder().setDescription(`\`üìå\` | ${message.author} N√£o Pingue Everyone!.`)] });
          setTimeout(async () => {
              await msg.delete();
          }, 5000);
  
          try {
              guild.channels.cache.get(await db2.get(`automod.canal_de_logs`)).send({
                  embeds: [
                      new EmbedBuilder()
                          .setColor('8ecae6')
                          .setDescription(`${message.author} Pingou Everyone\n\`\`\`${message.content}\`\`\``)
                  ]
              });
          } catch (error) {
              return;
          }
      }
        
  
  
      } else {
        return
      }
  
  
    } else {
      return;
    }
  
  });
  
  

  